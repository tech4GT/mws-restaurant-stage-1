class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){this.restaurantsArr?(e(null,this.restaurants),console.log(this.restaurantsArr)):fetch(DBHelper.DATABASE_URL).then(t=>{if(200===t.status)t.json().then(t=>{this.restaurantsArr=JSON.parse(JSON.stringify(t)),e(null,t)});else{const r=`Request failed. Returned status of ${t.status}`;e(r,null)}}).catch(t=>{DBHelper.getDB(t=>{var r=t.transaction("restaurants").objectStore("restaurants"),s=[];r.openCursor().onsuccess=function(t){var r=t.target.result;r?(s.push(r.value),r.continue()):(console.log("Read all restaurants from database"),this.restaurantsArr=s,e(null,s))}})})}static fetchRestaurantById(e,t){fetch(`${DBHelper.DATABASE_URL}/${e}`).then(e=>{if(console.log("then"),200==e.status)e.json().then(e=>{console.log(e),t(null,e)});else if(404==e.status)t(`Restaurant does not exist. Returned status of ${e.status}`,null);else{const r=`Request failed. Returned status of ${e.status}`;t(r,null)}}).catch(r=>{console.log("err"),DBHelper.getDB(r=>{r.transaction("restaurants").objectStore("restaurants").get(parseInt(e)).onsuccess=function(e){t(null,e.target.result)}})})}static fetchRestaurantByCuisine(e,t){if(this.restaurantsArr){const r=this.restaurantsArr.filter(t=>t.cuisine_type==e);t(null,r)}else DBHelper.fetchRestaurants((r,s)=>{if(r)t(r,null);else{const r=s.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){if(this.restaurantsArr){const r=this.restaurantsArr.filter(t=>t.neighborhood==e);t(null,r)}else DBHelper.fetchRestaurants((r,s)=>{if(r)t(r,null);else{const r=s.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){if(this.restaurantsArr){let s=this.restaurantsArr;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),r(null,s)}else DBHelper.fetchRestaurants((s,n)=>{if(s)r(s,null);else{let s=n;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),this.restaurantsArr=JSON.parse(JSON.stringify(s)),r(null,s)}})}static fetchNeighborhoods(e){if(this.restaurantsArr){let t=this.restaurantsArr;const r=t.map((e,r)=>t[r].neighborhood),s=r.filter((e,t)=>r.indexOf(e)==t);e(null,s)}else DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),s=t.filter((e,r)=>t.indexOf(e)==r);e(null,s)}})}static fetchCuisines(e){if(this.restaurantsArr){let t=this.restaurantsArr;const r=t.map((e,r)=>t[r].cuisine_type),s=r.filter((e,t)=>r.indexOf(e)==t);e(null,s)}else DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),s=t.filter((e,r)=>t.indexOf(e)==r);e(null,s)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){if(null!=e.photograph)return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static createDB(){fetch("http://localhost:1337/restaurants").then(e=>{e.json().then(e=>{e.forEach(e=>{fetch(`http://localhost:1337/reviews/?restaurant_id=${e.id}`).then(t=>{t.json().then(t=>{e.reviews=t})})});var t=window.indexedDB.open("restaurantsDB",1);t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(e){DBHelper.db=e.target.result},t.onupgradeneeded=function(t){DBHelper.db=t.target.result;var r=DBHelper.db,s=r.createObjectStore("restaurants",{keyPath:"id"});r.createObjectStore("favs",{keyPath:"id"}),r.createObjectStore("reviews",{keyPath:"restaurant_id"});s.createIndex("neighborhood","neighborhood",{unique:!1}),s.createIndex("cuisine_type","cuisine_type",{unique:!1}),s.transaction.oncomplete=function(t){var s=r.transaction("restaurants","readwrite").objectStore("restaurants");e.forEach(function(e){s.add(e)});s=r.transaction("favs","readwrite").objectStore("favs");e.forEach(function(e){s.add({id:e.id,starred:!1})})}}})}).catch(e=>{var t=window.indexedDB.open("restaurantsDB");t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(e){DBHelper.db=e.target.result}})}static getDB(e){var t=window.indexedDB.open("restaurantsDB");t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(t){DBHelper.db=t.target.result,e(DBHelper.db)}}}Object.defineProperty(DBHelper,"restaurantsArr",{value:void 0,writable:!0,enumerable:!0,configurable:!1}),window.addEventListener("offline",()=>{alert("You are offline now, your reviews will be synced when the connection is re-established")}),window.addEventListener("online",()=>{DBHelper.getDB(e=>{var t=e.transaction("reviews","readwrite").objectStore("reviews"),r=[];t.openCursor().onsuccess=function(s){var n=s.target.result;if(n)r.push(n.value),n.continue();else{console.log("Read all reviews from database");var a=new XMLHttpRequest;a.onreadystatechange=function(){console.log("review synced"),t=e.transaction("reviews","readwrite").objectStore("reviews"),r.forEach(e=>{t.delete(e.restaurant_id)})},a.open("POST","http://localhost:1337/reviews",!0),a.setRequestHeader("Content-type","application/x-www-form-urlencoded"),r.forEach(e=>{a.send(`restaurant_id=${encodeURIComponent(e.restaurant_id)}&name=${encodeURIComponent(e.name)}&rating=${encodeURIComponent(e.rating)}&comments=${encodeURIComponent(e.comments)}`)})}}})});