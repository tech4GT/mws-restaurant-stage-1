class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(t=>{if(200===t.status)t.json().then(t=>{e(null,t)});else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}).catch(t=>{DBHelper.getDB(t=>{var n=t.transaction("restaurants").objectStore("restaurants"),r=[];n.openCursor().onsuccess=function(t){var n=t.target.result;n?(r.push(n.value),n.continue()):(console.log("Read all restaurants from database"),console.log(r),e(null,r))}})})}static fetchRestaurantById(e,t){fetch(`${DBHelper.DATABASE_URL}/${e}`).then(e=>{if(console.log("then"),200==e.status)e.json().then(e=>{console.log(e),t(null,e)});else if(404==e.status)t(`Restaurant does not exist. Returned status of ${e.status}`,null);else{const n=`Request failed. Returned status of ${e.status}`;t(n,null)}}).catch(n=>{console.log("err"),DBHelper.getDB(n=>{n.transaction("restaurants").objectStore("restaurants").get(parseInt(e)).onsuccess=function(e){t(null,e.target.result)}})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,s)=>{if(r)n(r,null);else{let r=s;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){if(null!=e.photograph)return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static createDB(){fetch("http://localhost:1337/restaurants").then(e=>{e.json().then(e=>{var t=window.indexedDB.open("restaurantsDB",1);t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(e){DBHelper.db=e.target.result},t.onupgradeneeded=function(t){DBHelper.db=t.target.result;var n=DBHelper.db,r=n.createObjectStore("restaurants",{keyPath:"id"});r.createIndex("neighborhood","neighborhood",{unique:!1}),r.createIndex("cuisine_type","cuisine_type",{unique:!1}),r.transaction.oncomplete=function(t){var r=n.transaction("restaurants","readwrite").objectStore("restaurants");e.forEach(function(e){r.add(e)})}}})}).catch(e=>{var t=window.indexedDB.open("restaurantsDB");t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(e){DBHelper.db=e.target.result}})}static getDB(e){var t=window.indexedDB.open("restaurantsDB");t.onerror=function(e){console.err(`Bad request with error code ${t.errorCode}`)},t.onsuccess=function(t){DBHelper.db=t.target.result,e(DBHelper.db)}}}let restaurants,neighborhoods,cuisines;var map,markers=[];function isElementInViewport(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function lazyLoadImages(){var e=document.querySelectorAll("img[data-src]");[].forEach.call(e,function(e){isElementInViewport(e)&&(e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src"))}),0==e.length&&(window.removeEventListener("DOMContentLoaded",lazyLoadImages),window.removeEventListener("load",lazyLoadImages),window.removeEventListener("resize",lazyLoadImages),window.removeEventListener("scroll",lazyLoadImages))}document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),window.initMap=(()=>{"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.min.js").then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)},function(e){console.log("ServiceWorker registration failed: ",e)})}),self.indexedDB?window.addEventListener("load",()=>{DBHelper.createDB()}):self.alert("Your browser doesn't support a stable version of IndexedDB. Offline feature will not be available.");self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1});const e=document.getElementById("map");e.setAttribute("role","application"),e.setAttribute("tabindex",0),updateRestaurants(),window.addEventListener("DOMContentLoaded",lazyLoadImages),window.addEventListener("load",lazyLoadImages),window.addEventListener("resize",lazyLoadImages),window.addEventListener("scroll",lazyLoadImages)}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,s=e[n].value,a=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,a,(e,t)=>{e?console.error(e):(console.log(t),resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap(),window.addEventListener("DOMContentLoaded",lazyLoadImages),window.addEventListener("load",lazyLoadImages),window.addEventListener("resize",lazyLoadImages),window.addEventListener("scroll",lazyLoadImages)}),createRestaurantHTML=(e=>{const t=document.createElement("li"),n=document.createElement("img");n.className="restaurant-img";const r=DBHelper.imageUrlForRestaurant(e);r&&n.setAttribute("data-src",r),n.alt=`Restaurant ${e.name}`,t.append(n);const s=document.createElement("h2");s.innerHTML=e.name,t.append(s);const a=document.createElement("p");a.innerHTML=e.neighborhood,t.append(a);const o=document.createElement("p");o.innerHTML=e.address,t.append(o);const l=document.createElement("a");return l.innerHTML="View Details",l.href=DBHelper.urlForRestaurant(e),t.append(l),l.tabIndex=0,t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});